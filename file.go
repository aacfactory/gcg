/*
 * Copyright 2021 Wang Min Xiang
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package gcg

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"strings"

	"golang.org/x/tools/imports"
)

const (
	fileHeadNote = "// NOTE: This file has been automatically generated by github.com/aacfactory/gcg. \n// Dont Edit it."
)

func NewFile(packageName string) (f *File) {
	packageName = strings.TrimSpace(packageName)
	if packageName == "" {
		panic(fmt.Errorf("gcg: new file failed for package name is empty"))
		return
	}
	fileComments := make([]string, 0, 1)
	fileComments = append(fileComments, fileHeadNote)
	f = &File{
		fileComments: fileComments,
		packageName:  packageName,
		imports:      NewPackages(),
		statement:    newStatement(),
	}
	return
}

type File struct {
	fileComments []string
	packageName  string
	imports      Packages
	statement    *Statement
}

func (f *File) FileComments(comments ...string) {
	f.fileComments = append(f.fileComments, comments...)
}

func (f *File) AddImport(pkg *Package) {
	f.imports.Add(pkg)
}

func (f *File) AddCode(code Code) {
	if code == nil {
		return
	}
	f.statement.Add(code).Line()
}

func (f *File) Render(w io.Writer) (err error) {
	stmt := newStatement()
	// file comments
	stmt.Comments(f.fileComments...)
	stmt.Keyword("package").Space().Ident(f.packageName).Line()
	stmt.Line()
	// imports
	stmt.Add(f.imports.MapToCode())
	stmt.Line()
	// body
	stmt.Add(f.statement)

	// render
	buf := bytes.NewBufferString("")
	err = stmt.Render(buf)
	if err != nil {
		err = fmt.Errorf("gcg: render file failed, %v", err)
		return
	}
	// reformat
	p, fmtErr := f.reformat(buf.Bytes())
	if fmtErr != nil {
		err = fmt.Errorf("gcg: render file failed, %v", fmtErr)
		return
	}
	_, err = w.Write(p)
	if err != nil {
		err = fmt.Errorf("gcg: render file failed, %v", err)
		return
	}
	return
}

func (f *File) fillImports() {
	f.imports.Merge(f.statement.packages())
}

func (f *File) reformat(p []byte) (b []byte, err error) {
	b, err = imports.Process("", p, nil)
	if err != nil {
		err = fmt.Errorf("reformat code failed, %v", err)
		return
	}
	b, err = format.Source(b)
	if err != nil {
		err = fmt.Errorf("reformat code failed, %v", err)
		return
	}
	return
}
